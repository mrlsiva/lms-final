{"version":3,"sources":["models/store.js","components/header/header.js","components/dashboard/dashboard.js","components/dashboard/requestLeave.js","components/login/login.js","serviceWorker.js","index.js"],"names":["Store","observable","isAuthenticated","activeUser","empAppliedLeaves","superagent","require","Header","inject","observer","props","logoutHandler","post","send","name","set","end","err","res","console","log","get","data","JSON","parse","body","Navbar","bg","variant","Brand","href","Toggle","Collapse","className","Text","onClick","this","logout","React","Component","dateFormat","_","Dashboard","handleCancel","e","target","value","state","appliedLeaves","reqId","empid","index","findLastIndex","o","id","text","_state","stringify","status","_updateLeave","userDetails","availableLeave","setState","role","getUser","find","users","userRole","getUserDetails","empLeaves","concat","Container","Row","Col","Alert","xs","lg","Badge","Table","striped","bordered","hover","map","list","key","appliedOn","appliedFor","handleChange","handleSubmit","preventDefault","availableLeaves","department","requestedBy","empName","reason","requestedOn","dateOn","applied","leave","limitExceeds","minDate","Date","toISOString","split","_empName","_department","to","Button","Form","onSubmit","Group","controlId","Label","Control","type","placeholder","min","required","autoFocus","onChange","Login","userName","password","loginErr","date","Boolean","window","location","hostname","match","routing","exact","path","component","ApplyLeave","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d2d7744c.chunk.js","sourcesContent":["import {observable} from 'mobx';\n\nexport const Store = observable({\n    isAuthenticated: false,\n    activeUser: \"Guest\",\n    empAppliedLeaves: []\n });\n","import React from 'react';\nimport {Navbar} from 'react-bootstrap';\nimport {Store} from '../../models/store';\nimport { inject, observer } from \"mobx-react\";\n\nconst superagent = require('superagent');\n\nvar Header = inject(\"Store\")(\n    observer(\nclass Header extends React.Component {\n    constructor(props){\n        super(props);\n    }\n\n    logoutHandler = () => {\n        // Store.activeUser = \"Guest\";\n        const activeUserApi = \"http://localhost:3000/api/user\";\n        superagent.post(activeUserApi).send({ name: \"Guest\" }).set('accept', 'json').end((err, res) => {\n            // Calling the end function will send the request\n            console.log(\"User request: \", res, err);\n        });\n    }\n\n    componentDidMount(){\n        const url = \"http://localhost:3000/api/list\";\n        superagent.get(url).end((err, res) => {\n            if(err){\n                throw err;\n            }\n            const data = JSON.parse(res.body);\n            console.log(\"Response: \", data);\n            if(data.activeUser){\n                Store.activeUser = data.activeUser;\n            }\n        });\n    }\n    render() {\n        return (\n            <div>\n                <Navbar bg=\"light\" variant=\"light\">\n                    <Navbar.Brand href=\"/\">Company Name</Navbar.Brand>\n                    <Navbar.Toggle />\n                    <Navbar.Collapse className=\"justify-content-end\">\n                        <Navbar.Text>\n                            Signed in as: {Store.activeUser} | <a href=\"http://localhost:5000/api/logout\" onClick={this.logoutHandler}>{this.props.logout}</a>\n                        </Navbar.Text>\n                        <Navbar.Text>\n                            \n                        </Navbar.Text>\n                    </Navbar.Collapse>\n                </Navbar>\n            </div>\n            );\n            \n    }\n}\n)\n)\n\nexport default Header;","import React from 'react';\nimport Header from \"../header/header\";\nimport \"../../App.css\"\nimport { Alert, Badge, Container, Row, Col, Table } from 'react-bootstrap';\nimport {Store} from '../../models/store';\nimport { inject, observer } from \"mobx-react\";\nimport update from 'react-addons-update';\n\nconst dateFormat = require('dateformat');\n\nconst superagent = require('superagent');\nlet _ = require('lodash');\n\nvar Dashboard = inject(\"Store\")(\n    observer(\nclass Dashboard extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            empid: '',\n            role: '',\n            userDetails: {},\n            appliedLeaves: []\n        };\n    }\n\n    handleCancel = e => {\n        console.log(e.target.value);\n        console.log(\"Applied Leaves: \", this.state.appliedLeaves);\n        // let getUserDetails = _.find(this.state.appliedLeaves, ['id', e.target.value]);\n        let users = this.state.appliedLeaves;\n        const cancelReq = \"http://localhost:3000/api/cancel\";\n        superagent.post(cancelReq).send({ reqId: e.target.value, empid: this.state.empid }).set('accept', 'json').end((err, res) => {\n            // Calling the end function will send the request\n            console.log(\"User request: \", res, err);\n            \n            let index = _.findLastIndex(this.state.appliedLeaves, function(o) { return o.id == res.text; });\n            let _state = JSON.parse(JSON.stringify(this.state.appliedLeaves));\n            _state[index].status = \"Canceled\";\n            let _updateLeave = this.state.userDetails;\n            _updateLeave.availableLeave = this.state.userDetails.availableLeave+1\n            this.setState({\n                appliedLeaves:_state,\n                userDetails: _updateLeave\n                })\n        });\n      }\n\n      componentDidUpdate(){\n          console.log(\"Component Updated!!\");\n      }\n\n    componentDidMount(){\n        const url = \"http://localhost:3000/api/list\";\n        superagent.get(url).end((err, res) => {\n            if(err){\n                throw err;\n            }\n            const data = JSON.parse(res.body);\n            console.log(\"Response: \", data);\n            if(data.activeUser){\n                Store.activeUser = data.activeUser;\n                let getUser = _.find(data.users, ['name', data.activeUser]);\n                let userRole = getUser.role;\n                let empid = getUser.empid;\n                console.log(\"getUser: \", getUser, empid);\n                let getUserDetails = _.find(data[userRole], ['empid', empid]);\n                if(userRole === \"employee\"){\n\n                // console.log(\"getUserDetails: \", getUserDetails.appliedLeaves);\n                    let empLeaves = getUserDetails.appliedLeaves;\n                    this.setState({\n                        appliedLeaves: (this.state.appliedLeaves).concat(empLeaves)\n                    });\n                    \n                }\n                this.setState({\n                    role: userRole,\n                    userDetails: getUserDetails,\n                    empid: getUser.empid\n                });\n                Store.userDetails = getUserDetails;\n            }\n        });\n    }\n\n    \n    render() {\n        \n        return (\n            <div>\n                \n            <Header name=\"test\" logout=\"logout\" />\n            <Container>\n                <Row>\n                    <Col>&nbsp;</Col>\n                </Row>\n                {this.state.role === \"employee\" ? <Alert variant=\"secondary\">\n                    <Row>\n                        <Col xs lg=\"10\">Available number of leave</Col>\n                        <Col xs lg=\"2\">{this.state.userDetails.availableLeave}</Col>\n                    </Row>\n                </Alert> : ''}\n                \n                <Alert>\n                    <Row>\n                        <Col xs lg=\"10\" className=\"heading2\">\n                            {this.state.role === \"employee\" ?\n                                <h4>Leave Application List</h4> :\n                                <h4>Leave Application Request List</h4>\n                            }\n                        </Col>\n                        <Col xs lg=\"2\">\n                        {this.state.role === \"employee\" ?\n                            <Badge variant=\"primary\">\n                                <a href=\"/apply\">Apply for leave</a>\n                            </Badge> : ''}\n                        </Col>\n                    </Row>\n                </Alert>\n                <Row>\n                    <Col>\n                        <Table striped bordered hover>\n                            <thead>\n                                <tr>\n                                    <th>Date</th>\n                                    <th>Reason</th>\n                                    <th>Status</th>\n                                    <th>Action</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {\n                                    // console.log(\"State: \", this.state.appliedLeaves)\n                                    this.state.appliedLeaves.map((list, index) => {\n                                        return <tr key={index}>\n                                            <td>{dateFormat(list.appliedOn, \"mediumDate\")}</td>\n                                            <td>{list.appliedFor}</td>\n                                            <td><Badge variant={list.status === \"Applied\" \n                                                                                ? \"primary\" \n                                                                                : list.status === \"Approved\" \n                                                                                ? \"success\" \n                                                                                : list.status === \"Canceled\" \n                                                                                ? \"warning\" \n                                                                                : \"danger\"}>\n                                            {list.status}\n                                                </Badge></td>\n                                            <td>{list.status === \"Applied\" ? <Badge variant=\"danger\">\n                                                    <button value={list.id} onClick={this.handleCancel}>Cancel</button>\n                                                </Badge> : \"\"}</td>\n                                        </tr>\n                                    })\n                                }\n                            </tbody>\n                        </Table>\n                    </Col>\n                </Row>\n            </Container>\n            </div>\n            \n        );\n\n    }\n}\n)\n)\nexport default Dashboard;","import React from 'react';\nimport { Link} from 'react-router-dom';\nimport Header from \"../header/header\";\nimport \"../../App.css\"\nimport { Alert, Badge, Container, Row, Col, Table , Form, Button} from 'react-bootstrap';\nimport {Store} from '../../models/store';\nimport { inject, observer } from \"mobx-react\";\n\nconst dateFormat = require('dateformat');\n\nconst superagent = require('superagent');\nlet _ = require('lodash');\n\nvar Dashboard = inject(\"Store\")(\n    observer(\nclass Dashboard extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            empid: '',\n            empName: '',\n            department: '',\n            role: '',\n            userDetails: {},\n            appliedLeaves: [],\n            minDate: new Date().toISOString().split(\"T\")[0],\n            reason: '',\n            dateOn: '',\n            applied: false,\n            availableLeaves: 0,\n            limitExceeds: false\n        };\n    }\n\n    handleChange = e => {\n        this.setState({\n          [e.target.id]: e.target.value\n        });\n      }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if(this.state.availableLeaves > 0){\n            const url = \"http://localhost:3000/api/apply\";\n            console.log(\"UserDetails: \", this.state.department);\n            superagent.post(url).send({ requestedBy: this.state.empName, empid: this.state.empid, department: this.state.department, reason: this.state.reason, requestedOn: dateFormat(this.state.dateOn, \"mediumDate\") }).set('accept', 'json').end((err, res) => {\n                // Calling the end function will send the request\n                console.log(\"User request: \", res);\n                const data = JSON.parse(res.text);\n                console.log(\"Response: \", data);\n                this.setState({\n                    applied: true,\n                    availableLeaves: data.leave,\n                    reason: '',\n                    dateOn: ''\n                })\n            });\n        }\n        else{\n            this.setState({\n                limitExceeds: true,\n                reason: '',\n                dateOn: ''\n            })\n        }\n        \n    };\n\n    componentDidUpdate(){\n        console.log(\"Component Updated!!\");\n    }\n\n      componentDidMount(){\n        const url = \"http://localhost:3000/api/list\";\n        superagent.get(url).end((err, res) => {\n            if(err){\n                throw err;\n            }\n            const data = JSON.parse(res.body);\n            console.log(\"Response: \", data);\n            if(data.activeUser){\n                Store.activeUser = data.activeUser;\n                let getUser = _.find(data.users, ['name', data.activeUser]);\n                let userRole = getUser.role;\n                let empid = getUser.empid;\n                let _empName = getUser.name;\n                let _department = getUser.department;\n                console.log(\"getUser: \", getUser, empid);\n                let getUserDetails = _.find(data[userRole], ['empid', empid]);\n                if(userRole == \"employee\"){\n\n                // console.log(\"getUserDetails: \", getUserDetails.availableLeave);\n                    let empLeaves = getUserDetails.appliedLeaves;\n                    this.setState({\n                        appliedLeaves: (this.state.appliedLeaves).concat(empLeaves),\n                        availableLeaves: getUserDetails.availableLeave\n                    });\n                    \n                }\n                this.setState({\n                    role: userRole,\n                    userDetails: getUserDetails,\n                    empid: getUser.empid,\n                    empName: _empName,\n                    department: _department\n                });\n                Store.userDetails = getUserDetails;\n            }\n        });\n    }\n    \n    render() {\n        \n        return (\n            <div>\n                \n                \n            <Header name=\"test\" logout=\"logout\" />\n            <Container>\n                <Row>\n                    <Col>&nbsp;</Col>\n                </Row>\n                 <Alert variant=\"secondary\">\n                    <Row>\n                        <Col xs lg=\"10\">Available number of leave</Col>\n                        <Col xs lg=\"2\">{this.state.availableLeaves}</Col>\n                    </Row>\n                </Alert> \n                {this.state.limitExceeds ? <Alert variant=\"danger\">\n                    Leaves not available in your basket! Please contact your manager.\n                </Alert> : ''}\n                <Alert>\n                    <Row>\n                        <Col xs lg=\"10\" className=\"heading2\">\n                        <h4>Apply for leave</h4>\n                        </Col>\n                        <Col xs lg=\"2\">\n                            <Link to=\"/dashboard\">\n                                <Button>Dashboard</Button>\n                            </Link>\n                        </Col>\n                    </Row>\n                </Alert>\n                <Row>\n                    <Col lg={1}>&nbsp;</Col>\n                    <Col lg={4}>\n                    <Form onSubmit={this.handleSubmit}>\n                        <Form.Group controlId=\"dateOn\">\n                            <Form.Label>Date</Form.Label>\n                            <Form.Control type=\"date\" placeholder=\"Choose a date\" min={this.state.minDate} required autoFocus value={this.state.dateOn} onChange={this.handleChange} />\n                        </Form.Group>\n\n                        <Form.Group controlId=\"reason\">\n                            <Form.Label>Reason</Form.Label>\n                            <Form.Control type=\"text\" placeholder=\"Reason\" required value={this.state.reason} onChange={this.handleChange} />\n                        </Form.Group>\n                        <Button variant=\"primary\" type=\"submit\">\n                            Submit\n                        </Button>\n                        </Form>\n                    </Col>\n                    <Col lg={7}>&nbsp;</Col>\n                </Row>\n            </Container>\n            </div>\n            \n        );\n\n    }\n}\n)\n)\nexport default Dashboard;","//user login\nimport React from 'react';\nimport Header from \"../header/header\";\nimport { Alert, Container, Row, Col, Form, Button } from 'react-bootstrap';\nimport { Redirect } from 'react-router-dom';\nimport { Store } from '../../models/store';\n\nconst superagent = require('superagent');\nvar _ = require('lodash');\n\nexport class Login extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            date: new Date(),\n            // isAuthenticated: Store.isAuthenticated\n            isAuthenticated: false,\n            userName: '',\n            password: '',\n            loginErr: false\n        };\n    } \n\n    componentDidMount(){\n        // const url = \"http://localhost:3000/api/list\";\n        // superagent.get(url).end((err, res) => {\n        //     if(err){\n        //         throw err;\n        //     }\n        //     const data = JSON.parse(res.body);\n        //     console.log(\"Response: \", data);\n        //     if(data.activeUser){\n        //         Store.activeUser = data.activeUser;\n        //     }\n        // });\n    }\n    componentWillUnmount(){\n        const activeUserApi = \"http://localhost:3000/api/user\";\n        superagent.post(activeUserApi).send({ name: this.state.userName }).set('accept', 'json').end((err, res) => {\n            // Calling the end function will send the request\n            console.log(\"User request: \", res, err);\n        });\n    }\n    handleChange = e => {\n        this.setState({\n          [e.target.id]: e.target.value\n        });\n      }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        const url = \"http://localhost:3000/api/list\";\n        superagent.get(url).end((err, res) => {\n            if(err){\n                throw err;\n            }\n            const data = JSON.parse(res.body);\n\n            console.log(\"data: \", data.users, \" && \", this.state.userName);\n            let getUser = _.find(data.users, ['name', this.state.userName]);\n            console.log(\"getUser: \", getUser.password);\n            if(!getUser || getUser.password !== this.state.password){\n                this.setState({\n                    isAuthenticated: false,\n                    loginErr: true\n                });\n            }\n            else{\n                this.setState({\n                    isAuthenticated: true,\n                    loginErr: false\n                });\n\n                Store.activeUser = getUser.name;\n                \n            }\n            \n\n        });\n \n    };\n    \n    render() {\n        if(this.state.isAuthenticated === true){\n            return <Redirect to='/dashboard' />;\n        }\n        return (\n            <div>\n                <Header name=\"Guest\" />\n                \n                <Container>\n                    <Row>\n                        <Col>&nbsp;</Col>\n                    </Row>\n                    {this.state.loginErr ? <Alert variant=\"danger\">\n                        <Row>\n                            <Col xs lg=\"12\">Please enter valid credentials!</Col>\n                        </Row>\n                    </Alert> : ''}\n                    \n                    \n                    <Row>\n                        <Col lg=\"4\"></Col>\n                        <Col lg=\"4\">\n                        <Form onSubmit={this.handleSubmit}>\n                            <Form.Group controlId=\"userName\">\n                                <Form.Label>Username</Form.Label>\n                                <Form.Control autoFocus type=\"text\" placeholder=\"Enter name\" required value={this.state.userName} onChange={this.handleChange} />\n                            </Form.Group>\n\n                            <Form.Group controlId=\"password\">\n                                <Form.Label>Password</Form.Label>\n                                <Form.Control type=\"password\" placeholder=\"Password\" required  onChange={this.handleChange} />\n                            </Form.Group>\n                            <Button variant=\"primary\" type=\"submit\">\n                                Submit\n                            </Button>\n                            </Form>\n                        </Col>\n                        <Col lg=\"4\"></Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport './index.css';\n// import App from './App.js';\nimport  Dashboard  from \"./components/dashboard/dashboard\";\nimport  ApplyLeave  from \"./components/dashboard/requestLeave\";\nimport { Login } from \"./components/login/login\";\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Store } from \"./models/store\";\nimport { Provider } from \"mobx-react\"\n\nconst routing = (\n    <Provider Store={Store}>\n    <Router>\n      <div>\n        <Route exact path=\"/\" component={Login} />\n        <Route path=\"/dashboard\" component={Dashboard} />\n        <Route path=\"/apply\" component={ApplyLeave} />\n      </div>\n    </Router>\n    </Provider>\n  )\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}